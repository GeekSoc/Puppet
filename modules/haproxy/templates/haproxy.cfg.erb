# this config needs haproxy-1.1.28 or haproxy-1.2.1

global
    log 127.0.0.1   local0
    log 127.0.0.1   local1 notice
    #log loghost    local0 info
    maxconn 4096
    #chroot /usr/share/haproxy
    user haproxy
    group haproxy
    daemon
    #debug
    #quiet
    stats socket /etc/haproxy/haproxysock level admin

defaults
    log global
    mode    http
    option  httplog
    option  dontlognull
    retries 3
    option redispatch
    maxconn 2000
    contimeout  5000
    clitimeout  50000
    srvtimeout  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/custom_errors/500.http
	errorfile 502 /etc/haproxy/custom_errors/502.http
	errorfile 503 /etc/haproxy/custom_errors/503.http
	errorfile 504 /etc/haproxy/custom_errors/504.http

# Backend Servers
backend tauron
    mode http
    timeout connect 5s
    timeout server 5m
    balance roundrobin
    server tauron 130.159.141.117:80 weight 1 maxconn 10000

backend mirror
    mode http
    timeout connect 5s
    timeout server 5m
    balance roundrobin
    server mirror 130.159.141.98:80 weight 1 maxconn 10000

backend idran
    mode http
    timeout connect 5s
    timeout server 5m
    balance roundrobin
    server idran 130.159.141.81:80 weight 1 maxconn 10000

backend socs
    mode http
    timeout connect 5s
    timeout server 5m
    balance roundrobin
    server socs 130.159.141.72:80 weight 1 maxconn 10000
    
backend idran_etherpad
    mode http
    timeout connect 5s
    timeout server 5m
    balance roundrobin
    server idran_etherpad 130.159.141.81:9001 weight 1 maxconn 10000

# HTTP Reverse Proxy
listen  http 0.0.0.0:80
    mode http
    option forwardfor
    option http-server-close
    option http-pretend-keepalive

    stats enable
    stats auth admin:<%= scope.function_extlookup(["haproxy_stats_pw"]) %>

    acl req_nagios hdr_dom(host) -i nagios
    acl req_munin hdr_dom(host) -i munin
    acl req_mirror hdr_dom(host) -i mirror
    acl req_etherpad hdr_dom(host) -i etherpad
	acl req_socs hdr_dom(host) -i clubs

    default_backend idran #by default forward the requests to idran
    use_backend tauron if req_nagios
    use_backend tauron if req_munin
    use_backend mirror if req_mirror
    use_backend idran_etherpad if req_etherpad
	use_backend socs if req_socs

# Send SSL traffic to Idran (in TCP mode - no SSL termination here)
listen  https 0.0.0.0:443
    mode tcp
    option tcplog
    balance roundrobin
    server idran 130.159.141.81:443
